%% Simulating Hash Table Performance

% Making the hash function
function index = simpleHash(ip, tableSize)
    hash = 0;
    %prime number used for hashing
    prime = 31; 
    for i = 1:length(ip)
        hash = mod(hash * prime + double(str(i)), 2^32); %modding to the base of 2^32 to avoid overflow as interger is only 32 bits
    end

    index = mod(hash, tableSize);
end

% Insert function for hash table. With chaining in case of collision
function hashTable = insert(hashTable, ip, next, tableSize)
    index = simpleHash(ip, tableSize);
    
    %Check if the cell is empty
    if isempty(hashTable{index})
        hashTable{index} = {ip, next};
    else
        hashTable{index} = [hashTable{index}; {ip, next}];
    end
end

% Lookup function for the hash table
function result = lookup(hashTable, ip, tableSize)
    index = simpleHash(ip, tableSize);
    bucket = hashTable{in}
end

tableSize = 10;
hashTable = cell(1, tableSize);
